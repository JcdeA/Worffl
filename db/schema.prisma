// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  name           String    @unique
  ghusername     String?
  ghuserid       Int       @unique
  email          String    @unique
  role           role      @default(USER)
  picture        String?
  installationId Int?
  tokens         Token[]
  sessions       Session[]
  projects       Project[]
  ghRepos        GhRepo[]
  teams          Team[]
}

enum role {
  USER
  ADMIN
}

model GhRepo {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime
  updatedAt     DateTime
  ownerType     OwnerType @default(USER)
  name          String    @unique
  ghid          Int       @unique
  owner         User?     @relation(fields: [ownerId], references: [id])
  ownerTeam     Team?     @relation(fields: [ownerTeamId], references: [id])
  ownerTeamId   Int?
  projectId     Int?
  project       Project?  @relation(fields: [projectId], references: [id])
  ownerId       Int?
  defaultBranch String    @default("main")
  private       Boolean
  branches      String[]
  lang          String?
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  // type        String
  // See note below about TokenType enum
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

enum Status {
  IN_PROGRESS
  SUCCESS
  ERROR
}

model Deployment {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  name      String
  type      DeploymentType
  logs      LogLine[]
  domain    String
  sha       String
  status    Status
  project   Project        @relation(fields: [projectId], references: [id])
  projectId Int
}

enum DeploymentType {
  PRODUCTION
  STAGING
}

model LogLine {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  content      String
  Deployment   Deployment? @relation(fields: [deploymentId], references: [id])
  deploymentId Int?
}

model Project {
  ownerType   OwnerType
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String       @unique
  lang        String
  commands    commands     @relation(fields: [commandsId], references: [id])
  user        User?        @relation(fields: [userId], references: [id])
  team        Team?        @relation(fields: [teamId], references: [id])
  teamId      Int?
  userId      Int?
  Deployments Deployment[]
  GhRepo      GhRepo?
  mainBranch  String
  commandsId  Int
}

model commands {
  id         Int       @id @default(autoincrement())
  installCmd String
  buildCmd   String
  startCmd   String
  Project    Project[]
}

enum OwnerType {
  USER
  TEAM
}

model Team {
  id             Int       @id @default(autoincrement())
  name           String    @unique
  createdAt      DateTime  @default(now())
  members        User[]
  ghOrgId        Int       @unique
  installationId Int
  Project        Project[]
  GhRepo         GhRepo[]
}
